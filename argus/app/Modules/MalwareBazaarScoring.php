<?php
namespace App\Modules;
/**
 * MalwareBazaar Scoring Calculator
 */
class MalwareBazaarScoring
{
    private $weights;

    public function __construct()
    {
        // Bobot untuk setiap sumber intel
        $this->weights = [
            'vendor_detection' => 0.4, // Skor dari vendor intel utama
            'yara_matches'     => 0.3, // Jumlah rule YARA yang terdeteksi
            'tags'             => 0.3  // Jumlah tag relevan (indikator malware)
        ];
    }

    private function calculateVendorScore(array $vendor_intel): float
    {
        $scores = [];

        // CAPE: detection string → high risk
        if (!empty($vendor_intel['CAPE']['detection'])) {
            $scores[] = 1.0;
        }

        // Triage: score field (0-10)
        if (!empty($vendor_intel['Triage']['score'])) {
            $scores[] = min(floatval($vendor_intel['Triage']['score']) / 10, 1.0);
        }

        // ANY.RUN: jika verdict malicious → full score
        if (!empty($vendor_intel['ANY.RUN'][0]['verdict']) && stripos($vendor_intel['ANY.RUN'][0]['verdict'], 'malicious') !== false) {
            $scores[] = 1.0;
        }

        // YOROI_YOMI: score langsung
        if (!empty($vendor_intel['YOROI_YOMI']['score'])) {
            $scores[] = min(floatval($vendor_intel['YOROI_YOMI']['score']), 1.0);
        }

        // FileScan-IO: confidence
        if (!empty($vendor_intel['FileScan-IO']['confidence'])) {
            $scores[] = min(floatval($vendor_intel['FileScan-IO']['confidence']), 1.0);
        }

        // ReversingLabs: scanner_percent
        if (!empty($vendor_intel['ReversingLabs']['scanner_percent'])) {
            $percent = floatval($vendor_intel['ReversingLabs']['scanner_percent']);
            $scores[] = min($percent / 100, 1.0);
        }

        if (empty($scores)) {
            return 0.0;
        }

        // Rata-rata semua vendor
        return array_sum($scores) / count($scores);
    }

    private function calculateYaraScore(array $yara_rules): float
    {
        if (empty($yara_rules)) {
            return 0.0;
        }

        // Setiap YARA match = 0.25 poin, max 1.0
        return min(count($yara_rules) * 0.25, 1.0);
    }

    private function calculateTagScore(array $tags): float
    {
        if (empty($tags)) {
            return 0.0;
        }

        // Tag yang jelas mengindikasikan malware → nilai lebih
        $malware_indicators = ['agenttesla', 'stealer', 'ransomware', 'trojan', 'keylogger'];
        $score = 0;

        foreach ($tags as $tag) {
            if (in_array(strtolower($tag), $malware_indicators)) {
                $score += 0.3;
            } else {
                $score += 0.1;
            }
        }

        return min($score, 1.0);
    }

    public function calculateFinalScore(array $mb_data): array
    {
        $report_data = $mb_data['report']['data'][0] ?? null;
        if (empty($report_data)) {
            return ['final_score' => 0, 'risk_level' => 'LOW'];
        }

        $vendor_intel = $report_data['vendor_intel'] ?? [];
        $yara_rules = $report_data['yara_rules'] ?? [];
        $tags = $report_data['tags'] ?? [];

        $vendor_score = $this->calculateVendorScore($vendor_intel);
        $yara_score   = $this->calculateYaraScore($yara_rules);
        $tag_score    = $this->calculateTagScore($tags);

        // Weighted final score
        $final_score = (
            $vendor_score * $this->weights['vendor_detection'] +
            $yara_score * $this->weights['yara_matches'] +
            $tag_score * $this->weights['tags']
        );

        // Risk level
        if ($final_score >= 0.7) {
            $risk_level = 'HIGH';
        } elseif ($final_score >= 0.4) {
            $risk_level = 'MEDIUM';
        } else {
            $risk_level = 'LOW';
        }

        return [
            'final_score' => round($final_score, 3),
            'risk_level'  => $risk_level
        ];
    }
}